
# Happy Coding!

service: pyme-state-machine-scraping

frameworkVersion: '3'

plugins:
  - serverless-step-functions
provider:
  name: aws
  runtime: nodejs16.x
  stage: development
  region: us-east-1
  memorySize: 512
  stackName: pyme-state-machine-scraping
  apiName: pyme-state-machine-scraping
  deploymentBucket:
    name: ${self:custom.${opt:stage, self:provider.stage}DeployBucket}
  apiGateway:
    description: BBVA PyME Scraping
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonS3FullAccess
    - arn:aws:iam::425231278465:policy/athenaQuery-EventBridge
    - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
    - arn:aws:iam::aws:policy/AmazonSNSFullAccess
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource: arn:aws:secretsmanager:*:*:*
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource: arn:aws:secretsmanager:*:*:*
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"
    - Effect: 'Allow'
      Action:
        - s3:*
        - s3:*Object
        - s3:GetObject
      Resource: ${self:custom.${opt:stage, self:provider.stage}S3ARN}
    - Effect: 'Allow'
      Action:
        - s3:*
        - s3:*Object
        - s3:GetObject
      Resource: ${self:custom.${opt:stage, self:provider.stage}S3ARN1}
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: ${self:custom.${opt:stage, self:provider.stage}SQS_ARN_ERROR}
  environment:
    sqsError: ${self:custom.${opt:stage, self:provider.stage}SQS_ERROR_URL}
    STATE_MACHINE: arn:aws:states:us-east-1:425231278465:stateMachine:${self:custom.bbvaPyMEScrapingStateMachine}
    
functions:
  # Lambda function that load Expressjs
  main:
    timeout: 30
    handler: index.server
    environment:
      DIS_GA_TABLE: ${self:custom.DIS_GA_TABLE}
    description: lambda function BBVA PyME Scraping cronjob
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  # lambda function BBVA PyME Scraping getDataFromInegi
  getDataFromGoogle:
    handler: stepFunctionsHandler.getDataFromGoogle
    name: pyme-state-machine-scraping-getDataFromGoogle
    description: BBVA PyME Scraping getDataFromGoogle
    timeout: 100 #
  # lambda function BBVA PyME Scraping getDataFromInegi
  getDataFromInegi:
    handler: stepFunctionsHandler.getDataFromInegi
    name: pyme-state-machine-scraping-getDataFromInegi
    description: BBVA PyME Scraping getDataFromInegi
    timeout: 100 #
  # lambda function BBVA PyME Scraping generateReport
  generateReport:
    handler: stepFunctionsHandler.generateReport
    name: pyme-state-machine-scraping-generateReport
    environment:
      DIS_GA_TABLE: ${self:custom.DIS_GA_TABLE}
      SNS_REPORT_ARN: ${self:custom.SNS_REPORT_ARN}
    description: BBVA PyME Scraping generateReport
    timeout: 900 #
  # lambda function that runs error notification
  fallback:
    timeout: 900
    handler: stepFunctionsHandler.fallback
    name: pyme-state-machine-scraping-fallback
    description:  BBVA PyME Scraping - Step Function - error handler # 

stepFunctions:
  stateMachines:
    bbvaPyMEScrapingStateMachine:
      name: ${self:custom.bbvaPyMEScrapingStateMachine}
      definition:
        Comment: "BBVA PyME Scraping StateMachine - Step Functions"
        StartAt: getDataFromGoogle
        # TimeoutSeconds: 1500
        States:
            getDataFromGoogle:
              Type: Task
              Resource:
                Fn::GetAtt: [getDataFromGoogle, Arn]
              Catch: [ {
                ErrorEquals: [States.TaskFailed],
                Next: fallback
              } ]
              Next: getDataFromInegi
            getDataFromInegi:
              Type: Task
              Resource:
                Fn::GetAtt: [getDataFromInegi, Arn]
              Catch: [ {
                ErrorEquals: [States.TaskFailed],
                Next: fallback
              } ]
              Next: validateGetQueryStatusLoop
            validateGetQueryStatusLoop:
              Type: Choice
              Choices: [ {
                  Variable: "$.queryStatus",
                  StringEquals: "RUNNING",
                  Next: getDataFromInegi
              },
              {
                Variable: "$.queryStatus",
                StringEquals: "QUEUED",
                Next: getDataFromInegi
              },
              {
                Variable: "$.queryStatus",
                StringEquals: "SUCCEEDED",
                Next: generateReport
              },
              {
                Variable: "$.queryStatus",
                StringEquals: "FAILED",
                Next: fallback
              } ]
              Default: fallback
            generateReport:
              Type: Task
              Resource:
                Fn::GetAtt: [generateReport, Arn]
              Catch: [ {
                ErrorEquals: [States.TaskFailed],
                Next: fallback
              } ]
              Next: Done
            Done:
              Type: "Pass"
              End: true
            fallback:
              Type: Task
              Resource:
                Fn::GetAtt: [fallback, Arn]
              End: true       

custom:
  bbvaPyMEScrapingStateMachine: 'bbvaPyMEScrapingStateMachine'

  productionDeployBucket: 'xserverless.deploys'
