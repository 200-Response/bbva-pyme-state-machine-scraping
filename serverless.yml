
# Happy Coding!

service: pyme-state-machine-scraping

frameworkVersion: '3'

plugins:
  - serverless-step-functions
provider:
  name: aws
  runtime: nodejs16.x
  stage: production
  region: us-east-1
  memorySize: 512
  stackName: pyme-state-machine-scraping
  apiName: pyme-state-machine-scraping
  deploymentBucket:
    name: ${self:custom.${opt:stage, self:provider.stage}DeployBucket}
  apiGateway:
    description: BBVA PyME Scraping
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonS3FullAccess
    - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
    - arn:aws:iam::aws:policy/AmazonSNSFullAccess
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource: arn:aws:secretsmanager:*:*:*
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource: arn:aws:secretsmanager:*:*:*
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/*"
  environment:
    s3Bucket: ${self:custom.${opt:stage, self:provider.stage}S3}
    BLOCK_SIZE: 10000
    CURRENT_API: 'https://gt47vf0wmj.execute-api.us-east-1.amazonaws.com/production'
    BBVA_PYME_STATE_MACHINE_SCRAPING: arn:aws:states:us-east-1:529734809950:stateMachine:${self:custom.bbvaPyMEScrapingStateMachine}
    
functions:
  main:
    timeout: 30
    handler: index.server
    description: lambda function BBVA PyME Scraping cronjob
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  s3Trigger:
    handler: index.s3Trigger
    name: pyme-state-machine-scraping-s3Trigger
    description:  lambda function BBVA PyME Scraping - s3 trigger
    timeout: 900 #
    events:
      - s3:
          bucket: ${self:custom.${opt:stage, self:provider.stage}S3}
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  getDataGeo:
    handler: stepFunctionsHandler.getDataGeo
    name: pyme-state-machine-scraping-getDataGeo
    description: BBVA PyME Scraping getDataGeo
    timeout: 100 #
  getDataFromGoogle:
    handler: stepFunctionsHandler.getDataFromGoogle
    name: pyme-state-machine-scraping-getDataFromGoogle
    description: BBVA PyME Scraping getDataFromGoogle
    timeout: 100 #
  getDataFromInegi:
    handler: stepFunctionsHandler.getDataFromInegi
    name: pyme-state-machine-scraping-getDataFromInegi
    description: BBVA PyME Scraping getDataFromInegi
    timeout: 100 #
  getDataFromDataMexico:
    handler: stepFunctionsHandler.getDataFromDataMexico
    name: pyme-state-machine-scraping-getDataFromDataMexico
    description: BBVA PyME Scraping getDataFromDataMexico
    timeout: 100 #
  generateReport:
    handler: stepFunctionsHandler.generateReport
    name: pyme-state-machine-scraping-generateReport
    description: BBVA PyME Scraping generateReport
    timeout: 900
  fallback:
    timeout: 900
    handler: stepFunctionsHandler.fallback
    name: pyme-state-machine-scraping-fallback
    description:  BBVA PyME Scraping - Step Function - error handler # 

stepFunctions:
  stateMachines:
    bbvaPyMEScrapingStateMachine:
      name: ${self:custom.bbvaPyMEScrapingStateMachine}
      definition:
        Comment: "BBVA PyME Scraping StateMachine - Step Functions"
        StartAt: getDataGeo
        # TimeoutSeconds: 1500
        States:
          getDataGeo:
            Type: Task
            Resource:
              Fn::GetAtt: [ getDataGeo, Arn ]
            Catch: [ {
              ErrorEquals: [ States.TaskFailed ],
              Next: fallback
            } ]
            Next: getDataFromGoogle
          getDataFromGoogle:
            Type: Task
            Resource:
              Fn::GetAtt: [getDataFromGoogle, Arn]
            Catch: [ {
              ErrorEquals: [States.TaskFailed],
              Next: fallback
            } ]
            Next: getDataFromInegi
          getDataFromInegi:
            Type: Task
            Resource:
              Fn::GetAtt: [getDataFromInegi, Arn]
            Catch: [ {
              ErrorEquals: [States.TaskFailed],
              Next: fallback
            } ]
            Next: getDataFromDataMexico
          getDataFromDataMexico:
            Type: Task
            Resource:
              Fn::GetAtt: [ getDataFromInegi, Arn ]
            Catch: [ {
              ErrorEquals: [ States.TaskFailed ],
              Next: fallback
            } ]
            Next: generateReport
          generateReport:
            Type: Task
            Resource:
              Fn::GetAtt: [generateReport, Arn]
            Catch: [ {
              ErrorEquals: [States.TaskFailed],
              Next: fallback
            } ]
            Next: Done
          Done:
            Type: "Pass"
            End: true
          fallback:
            Type: Task
            Resource:
              Fn::GetAtt: [fallback, Arn]
            End: true       

custom:
  bbvaPyMEScrapingStateMachine: 'bbvaPyMEScrapingStateMachine'

  productionDeployBucket: 'xserverless-deploys-bbva2022'

  productionS3: 'pyme-raw-dataset'
